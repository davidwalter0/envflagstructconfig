func TestParseSlice{{.Type}}(t *testing.T) {
	T := reflect.TypeOf(slice{{.Type}}Value{}).Elem()
  fmt.Printf("%v %T\n", T,T)

	os.Clearenv()
  fmt.Println("Test for {{.type}} Slice{{.Type}}")
	var slice{{.Type}} = new(slice{{.Type}}Value)
	Var(slice{{.Type}}, "slice{{.Type}}", "use Slice{{.Type}}")
  switch T.Kind() {
  case reflect.Int8, reflect.Int16, reflect.Int, reflect.Int32, reflect.Int64:
    slice{{.Type}}.Set("1,2,3")
  case reflect.Uint8, reflect.Uint16, reflect.Uint, reflect.Uint32, reflect.Uint64:
    slice{{.Type}}.Set("1,2,3")
  case reflect.Float32, reflect.Float64:
    slice{{.Type}}.Set("1.1,2.2,3.3")
  case reflect.Bool:
    slice{{.Type}}.Set("false,true")
  }
	fmt.Printf("%v %T\n", *slice{{.Type}}, *slice{{.Type}})
	// Parse()
	// Usage()
}
