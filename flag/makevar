#!/bin/bash

# 1. struct definition
# 2. parse structure defintion from pointer
# 3. iterate over structure fields
# 4. parse struct tags
# 5. assign default value to struct field
# 6. use environment text if present
# 7. create flag var
# 8. 

declare -a names=(
duration
int
int8
int16
int32
int64
uint
uint8
uint16
uint32
uint64
float64
float32
bool
string
)

makeVarHead="package flag

import (
	\"log\"
	\"fmt\"
	\"time\"
)

// TypeName typename from environment variable TYPENAME 
// KeyName typename from environment variable KEYNAME
// SetterTypeName "typename" + "Value"
// MapCastType and MapSetterTypeName from transform of type & key
// Special case time.Duration

// MakeVar type cast to type with interface matching Set, Value
func MakeVar(addr interface{}, name, defaultValue, usage string) {
	switch ptr := addr.(type) {
"

makeVarTail="	default:
		// log.Fatalf(\"Unhandled Type %T\n\", ptr)
		panic(fmt.Sprintf(\"Unhandled Type %v %T\n\", ptr, ptr))
	}
}"



template="	case *{{.CastTypeName}}:
		var varType = (*{{.SetterTypeName}})(ptr)
		if err := varType.Set(defaultValue); err != nil {
		   log.Fatalf(\"Error setting {{.SetterTypeName}} %T %v\n\", ptr, err)
		}
		CommandLine.Var(varType, name, usage)"

# Var defines a flag with the specified name and usage string
maptemplate="	case *{{.MapCastType}}:
		var varType = (*{{.MapSetterTypeNameValue}})(ptr)
		if err := varType.Set(defaultValue); err != nil {
		   log.Fatalf(\"Error setting {{.MapSetterTypeNameValue}} %T %v\n\", ptr, err)
		}
		CommandLine.Var(varType, name, usage)"

sliceTemplate="	case *{{.SliceType}}:
		var varType = (*{{.SliceTypeValueName}})(ptr)
		if err := varType.Set(defaultValue); err != nil {
		   log.Fatalf(\"Error setting {{.SliceTypeValueName}} %T %v\n\", ptr, err)
		}
		CommandLine.Var(varType, name, usage)"

(
    echo "${makeVarHead}"
    for key in  $(echo ${names[@]}); do
        for value in  $(echo ${names[@]}); do
            export KEYNAME=${key}
            export TYPENAME=${value}
            echo "${maptemplate}" | k8s-template --mappings tmpl/mappings.yaml
            # k8s-template --template tmpl/mapcase.go.tmpl\
            #              --mappings tmpl/mappings.yaml
        done
    done
    unset TYPENAME
    unset KEYNAME

    for name in  $(echo ${names[@]}); do
        export TYPENAME=${name}
        echo "${template}" | k8s-template --mappings tmpl/mappings.yaml
        # k8s-template --template tmpl/varcase.go.tmpl \
        #              --mappings tmpl/mappings.yaml
    done
    unset TYPENAME
    unset KEYNAME
    for name in  $(echo ${names[@]}); do
        export TYPENAME=${name}
        echo "${sliceTemplate}" | k8s-template --mappings tmpl/mappings.yaml
        # k8s-template --template tmpl/varcase.go.tmpl \
        #              --mappings tmpl/mappings.yaml
    done
    unset TYPENAME
    unset KEYNAME

    echo "${makeVarTail}"
) > typecase.go


sliceTemplateBody="$(cat tmpl/flag-slice.go.body.tmpl)"
sliceTestTemplate="$(cat tmpl/flag-slice_test.go.body.tmpl)"

mapTemplateHeader='package flag

////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////
import (
	"fmt"
	"strings"
	"time"
)

'

sliceTemplateHeader='package flag

////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////
import (
	"fmt"
	"strings"
	"strconv"
	"reflect"
	"time"
)

'

sliceTestTemplateHeader='package flag

import (
	"fmt"
	"os"
	"testing"
	"reflect"
)
'
mapTypeTemplate="$(cat tmpl/map.go.tmpl)"
(
    echo "${mapTemplateHeader}"
    for key in  $(echo ${names[@]}); do
        for value in  $(echo ${names[@]}); do
            export KEYNAME=${key}
            export TYPENAME=${value}
            echo "${mapTypeTemplate}" | k8s-template --mappings tmpl/mappings.yaml
            # k8s-template --template tmpl/mapcase.go.tmpl\
            #              --mappings tmpl/mappings.yaml
        done
    done
) > maptypes.go

(
    echo "${sliceTemplateHeader}"
    for TYPENAME in $(echo ${names[@]}); do
        export TYPENAME=${TYPENAME}
        echo "${sliceTemplateBody}"     | k8s-template --mappings tmpl/mappings.yaml
    done
) > type.go

(
    echo "${sliceTestTemplateHeader}"
    for TYPENAME in $(echo ${names[@]}); do
        export TYPENAME=${TYPENAME}
        echo "${sliceTestTemplate}" | k8s-template --mappings tmpl/mappings.yaml
    done
) > type_test.go
