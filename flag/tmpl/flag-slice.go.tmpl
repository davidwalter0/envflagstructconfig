package flag

////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////
import (
	"fmt"
	"strings"
  "strconv"
  "reflect"
)

// slice{{.Type}}Value []{{.Type}}
type slice{{.Type}}Value []{{.type}}

func newslice{{.Type}}Value(val slice{{.Type}}Value, p *slice{{.Type}}Value) *slice{{.Type}}Value {
	for i := 0; i < len(val); i++ {
		*p = append(*p, val[i])
	}
	return p
}

// Set a slice after parsing a string
func (slc *slice{{.Type}}Value) Set(s string) error {
	T := reflect.TypeOf(slice{{.Type}}Value{}).Elem()
  fmt.Printf("%v %T\n", T,T)
	var n interface{}
	var l = strings.Split(s, ",")

	for _, text := range l {
  // start {{.type}}
    {{ $type := .type}}{{- $list := split "int8 int16 int int32 int64" -}}
    {{- range $list -}}{{- if eq $type . -}}
		n, _ = strconv.ParseInt(text, 0, T.Bits())
    *slc = append(*slc, ({{.}})(n.(int64)))
    {{- end -}}
    {{- end -}}
    {{ $type := .type}}{{- $list := split "uint8 uint16 uint uint32 uint64" -}}
    {{- range $list -}}{{- if eq $type . -}}
		n, _ = strconv.ParseUint(text, 0, T.Bits())
    *slc = append(*slc, ({{.}})(n.(uint64)))
    {{- end -}}
    {{- end -}}
    {{ $type := .type}}{{- $list := split "float32 float64" -}}
    {{- range $list -}}{{- if eq $type . -}}
		n, _ = strconv.ParseFloat(text, T.Bits())
    *slc = append(*slc, ({{.}})(n.(float64)))
    {{- end -}}
    {{- end -}}
    {{ $type := .type}}{{- $list := split "bool" -}}
    {{- range $list -}}{{- if eq $type . -}}
		n, _ = strconv.ParseBool(text)
    *slc = append(*slc, ({{.}})(n.(bool)))
    {{- end -}}
    {{- end -}}
    {{ if "" }} {{end}}
  // end {{.type}}
	}
	return nil
}

// Get get a slice interface from the value
func (slc *slice{{.Type}}Value) Get() interface{} { return ([]{{.type}})(*slc) }

// String join a string from slice
func (slc *slice{{.Type}}Value) String() string {
  t := []string{}
  for _, v := range *slc {
    t = append(t, fmt.Sprintf("%v", v))
  }
  return strings.Join(t, ",")
}

// slice{{.Type}}Var defines an slice flag with specified name,
// default value, and usage string.  The argument p points to an slice
// variable in which to store the value of the flag.
func (f *FlagSet) slice{{.Type}}Var(p *slice{{.Type}}Value, name string, value slice{{.Type}}Value, usage string) {
	f.Var(newslice{{.Type}}Value(value, p), name, usage)
}

// slice{{.Type}}Var defines an slice flag with specified name,
// default value, and usage string.  The argument p points to an slice
// variable in which to store the value of the flag.
func slice{{.Type}}Var(p *slice{{.Type}}Value, name string, value slice{{.Type}}Value, usage string) {
	CommandLine.Var(newslice{{.Type}}Value(value, p), name, usage)
}

// slice{{.Type}} defines an slice flag with specified name, default value, and
// usage string.  The return value is the address of an slice variable
// that stores the value of the flag.
func (f *FlagSet) slice{{.Type}}(name string, value slice{{.Type}}Value, usage string) *slice{{.Type}}Value {
	p := new(slice{{.Type}}Value)
	f.slice{{.Type}}Var(p, name, value, usage)
	return p
}

// slice{{.Type}} defines an slice flag with specified name, default value, and
// usage string.  The return value is the address of an slice variable
// that stores the value of the flag.
func slice{{.Type}}(name string, value slice{{.Type}}Value, usage string) *slice{{.Type}}Value {
	return CommandLine.slice{{.Type}}(name, value, usage)
}
